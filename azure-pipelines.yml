resources:
  repositories:
    - repository: rsg
      type: github
      name: RocketSurgeonsGuild/AzureDevopsTemplates
      ref: refs/tags/v0.4.5
      endpoint: github

variables:
  Verbosity: Diagnostic
  DotNetVersion: "2.1.505"
  CakeVersion: "0.32.1"
  NuGetVersion: "4.9.2"
  Coverage: "$(Agent.BuildDirectory)/c"
  VstsCoverage: "$(Coverage)"
  Artifacts: $(Build.SourcesDirectory)/artifacts/
  VstsArtifacts: "$(Artifacts)"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"

jobs:
  - job: GitVersion
    pool:
      vmImage: "VS2017-Win2016"
    steps:
      - template: gitversion/store.yml@rsg
        parameters:
          NuGetVersion: $(NuGetVersion)

  - job: macOS
    pool:
      vmImage: "macOS-10.13"
    dependsOn: GitVersion
    variables:
      MONO_VERSION: 5.16.0
    steps:
      - template: ./.pipelines/init.yml
        parameters:
          Verbosity: $(Verbosity)
          CakeVersion: $(CakeVersion)
          DotNetVersion: $(DotNetVersion)
          NuGetVersion: $(NuGetVersion)
          pushNuget: false
      - script: |
          sudo cp -rf /Library/Frameworks/Mono.framework/Versions/$MONO_VERSION/ /Library/Frameworks/Mono.framework/Versions/Current/
          MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$MONO_VERSION
          echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
          echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
          echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
        displayName: Use Mono $(MONO_VERSION)
        failOnStderr: false
      - script: |
          echo $PATH
          chmod 755 ./build.sh
          ./build.sh --configuration Release --verbosity Verbose --target All --publish-all --archive
        displayName: 'Build'
      - template: ./.pipelines/artifacts.yml
        parameters:
          Artifacts: $(Artifacts)

  - job: Linux
    pool:
      vmImage: "Ubuntu-16.04"
    dependsOn: GitVersion
    variables:
      MONO_VERSION: 5.16.0
    steps:
      - template: ./.pipelines/init.yml
        parameters:
          Verbosity: $(Verbosity)
          CakeVersion: $(CakeVersion)
          DotNetVersion: $(DotNetVersion)
          NuGetVersion: $(NuGetVersion)
          pushNuget: false
      - script: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          sudo apt install apt-transport-https ca-certificates
          echo "deb https://download.mono-project.com/repo/ubuntu preview-xenial main" | sudo tee /etc/apt/sources.list.d/mono-official-preview.list
          sudo apt update
          sudo apt install mono-devel
        displayName: Use Mono $(MONO_VERSION)
      - script: |
          chmod 755 ./build.sh
          ./build.sh --configuration Release --verbosity Verbose --target All --publish-all --archive
        displayName: 'Build'
      - template: ./.pipelines/artifacts.yml
        parameters:
          Artifacts: $(Artifacts)

  - job: Windows
    pool:
      vmImage: "VS2017-Win2016"
    dependsOn: GitVersion
    steps:
      - template: ./.pipelines/init.yml
        parameters:
          Verbosity: $(Verbosity)
          CakeVersion: $(CakeVersion)
          DotNetVersion: $(DotNetVersion)
          NuGetVersion: $(NuGetVersion)
          pushNuget: false
      - powershell: .\build.ps1 -configuration Release -verbosity Verbose -target All -publish-all -archive
        displayName: 'Build'
      - template: ./.pipelines/artifacts.yml
        parameters:
          Artifacts: $(Artifacts)
  - job: Release
    pool:
      vmImage: "Ubuntu-16.04"
    dependsOn:
      - macOS
      - Linux
      - Windows
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadType: 'single'
          artifactName: Packages
          buildType: 'current'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadType: 'single'
          artifactName: Deployment
          buildType: 'current'
          downloadPath: '$(System.ArtifactsDirectory)'
      - script: |
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
            sudo tee /etc/apt/sources.list.d/azure-cli.list
          curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https
          sudo apt-get update && sudo apt-get install azure-cli
          az storage blob upload-batch --destination "releases" --source $(System.ArtifactsDirectory)/deployment/ --account-name roslynomnisharp --account-key $BLOB_KEY
        displayName: Upload to Azure Storage
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        env:
          BLOB_KEY: $(BLOB_KEY)
      - task: GitHubRelease@0
        displayName: 'GitHub release (edit)'
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
        inputs:
          gitHubConnection: github
          repositoryName: OmniSharp/omnisharp-roslyn
          action: edit
          tag: '$(Build.SourceBranchName)'
          title: '$(Build.SourceBranchName)'
          assets: '$(System.ArtifactsDirectory)/packages/**/*'
          assetUploadMode: replace
          # releaseNotesSource: input
          # releaseNotes: asdfasdf12
          # isDraft: true
          # isPreRelease: true
          # addChangeLog: false
      # - task: DotNetCoreCLI@2
      #   displayName: 'Push NuGet packages to myget.org'
      #   inputs:
      #     command: push
      #     nuGetFeedType: external
      #     packagesToPush: ${{ format('{0}/nuget/*.nupkg;!{0}/nuget/*.symbols.nupkg', parameters.Artifacts) }}
      #     publishFeedCredentials: myget.org
      #   condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
      # - task: DotNetCoreCLI@2
      #   displayName: 'Push NuGet packages to nuget.org'
      #   inputs:
      #     command: push
      #     nuGetFeedType: external
      #     packagesToPush: ${{ format('{0}/nuget/*.nupkg;!{0}/nuget/*.symbols.nupkg', parameters.Artifacts) }}
      #     publishFeedCredentials: nuget.org
      #   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
