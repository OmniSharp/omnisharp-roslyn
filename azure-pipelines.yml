trigger:
  batch: "true"
  branches:
    include:
      - master
      - refs/tags/*

pr: none

resources:
  repositories:
    - repository: rsg
      type: github
      name: RocketSurgeonsGuild/AzureDevopsTemplates
      ref: refs/tags/v0.4.5
      endpoint: github

variables:
  Verbosity: Diagnostic
  DotNetVersion: "8.0.303"
  CakeVersion: "4.2.0"
  NuGetVersion: "6.5.0"
  GitVersionVersion: "5.0.1"
  MonoVersion: "6.12.0"
  Coverage: "$(Agent.BuildDirectory)/c"
  VstsCoverage: "$(Coverage)"
  Artifacts: $(Build.SourcesDirectory)/artifacts/
  VstsArtifacts: "$(Artifacts)"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
  IsMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  IsRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/v')]
  IsBetaRelease: $[and(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], '-beta.'))]
  IsOfficialRelease: $[and(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], '-beta.')))]

stages:
  - stage: CreateBetaReleaseTag
    displayName: "Tag Beta Release"
    condition: eq(variables.IsMaster, true)
    jobs:
      - job: GitVersion
        pool:
          vmImage: "windows-2019"
        steps:
          - template: gitversion/store.yml@rsg
            parameters:
              NuGetVersion: $(NuGetVersion)
              version: $(GitVersionVersion)

      - job: CreateTag
        pool:
          vmImage: "ubuntu-latest"
        dependsOn: GitVersion
        steps:
          - checkout: self
            fetchTags: false
            persistCredentials: true
          - template: ./.pipelines/init.yml
            parameters:
              Verbosity: $(Verbosity)
              CakeVersion: $(CakeVersion)
              DotNetVersion: $(DotNetVersion)
              NuGetVersion: $(NuGetVersion)
          - script: |
              git tag v$(Build.BuildNumber)
              git push --tags
          - task: GitHubRelease@1
            displayName: "GitHub create beta release"
            inputs:
              gitHubConnection: "OmniSharp Org"
              repositoryName: OmniSharp/omnisharp-roslyn
              action: create
              tag: "v$(Build.BuildNumber)"
              tagSource: gitTag
              title: "v$(Build.BuildNumber)"
              isDraft: true
              isPreRelease: true
              addChangeLog: true

  - stage: BuildRelease
    displayName: "Build Release"
    condition: eq(variables.IsRelease, true)
    jobs:
      - job: GitVersion
        pool:
          vmImage: "windows-2019"
        steps:
          - template: gitversion/store.yml@rsg
            parameters:
              NuGetVersion: $(NuGetVersion)
              version: $(GitVersionVersion)

      - job: macOS
        pool:
          vmImage: "macos-13"
        dependsOn: GitVersion
        steps:
          - template: ./.pipelines/init.yml
            parameters:
              Verbosity: $(Verbosity)
              CakeVersion: $(CakeVersion)
              DotNetVersion: $(DotNetVersion)
              NuGetVersion: $(NuGetVersion)
              MonoVersion: $(MonoVersion)
          - script: |
              echo $PATH
              chmod 755 ./build.sh
              ./build.sh --configuration Release --verbosity Verbose --target CI --publish-all --archive
            displayName: "Build"
          - template: ./.pipelines/artifacts.yml
            parameters:
              Artifacts: $(Artifacts)

      - job: Linux
        pool:
          vmImage: "ubuntu-20.04"
        dependsOn: GitVersion
        steps:
          - template: ./.pipelines/init.yml
            parameters:
              Verbosity: $(Verbosity)
              CakeVersion: $(CakeVersion)
              DotNetVersion: $(DotNetVersion)
              NuGetVersion: $(NuGetVersion)
              MonoVersion: $(MonoVersion)
          - script: |
              chmod 755 ./build.sh
              ./build.sh --configuration Release --verbosity Verbose --target CI --publish-all --archive
            displayName: "Build"
          - template: ./.pipelines/artifacts.yml
            parameters:
              Artifacts: $(Artifacts)

      - job: Windows
        pool:
          vmImage: "windows-2022"
        dependsOn: GitVersion
        steps:
          - template: ./.pipelines/init.yml
            parameters:
              Verbosity: $(Verbosity)
              CakeVersion: $(CakeVersion)
              DotNetVersion: $(DotNetVersion)
              NuGetVersion: $(NuGetVersion)
          - powershell: .\build.ps1 -configuration Release -verbosity Verbose -target CI --publish-all --archive
            displayName: "Build"
          - template: ./.pipelines/artifacts.yml
            parameters:
              Artifacts: $(Artifacts)

      - job: Release
        pool:
          vmImage: "ubuntu-latest"
        dependsOn:
          - macOS
          - Linux
          - Windows
        steps:
          - template: ./.pipelines/init.yml
            parameters:
              Verbosity: $(Verbosity)
              CakeVersion: $(CakeVersion)
              DotNetVersion: $(DotNetVersion)
              NuGetVersion: $(NuGetVersion)
          - task: DownloadBuildArtifacts@0
            displayName: Download Packages
            inputs:
              downloadType: "single"
              artifactName: "packages"
              buildType: "current"
              downloadPath: "$(System.ArtifactsDirectory)"
          - task: DownloadBuildArtifacts@0
            displayName: Download Deployment
            inputs:
              downloadType: "single"
              artifactName: "deployment"
              buildType: "current"
              downloadPath: "$(System.ArtifactsDirectory)"
          - task: DownloadBuildArtifacts@0
            displayName: Download NuGet
            inputs:
              downloadType: "single"
              artifactName: "nuget"
              buildType: "current"
              downloadPath: "$(System.ArtifactsDirectory)"
          - task: NuGetCommand@2
            displayName: "Push NuGet packages to Azure Artifacts"
            inputs:
              command: push
              nuGetFeedType: internal
              packagesToPush: "$(System.ArtifactsDirectory)/nuget/**/*.nupkg"
              publishVstsFeed: Builds/omnisharp
              allowPackageConflicts: true
          - task: NuGetCommand@2
            displayName: "Push NuGet packages to nuget.org"
            inputs:
              command: push
              nuGetFeedType: external
              packagesToPush: "$(System.ArtifactsDirectory)/nuget/**/*.nupkg"
              publishFeedCredentials: nuget.org
              allowPackageConflicts: true
            condition: and(succeeded(), eq(variables.IsOfficialRelease, true))
          - task: GitHubRelease@1
            displayName: "GitHub release (edit)"
            inputs:
              gitHubConnection: "OmniSharp Org"
              repositoryName: OmniSharp/omnisharp-roslyn
              action: edit
              tag: "$(Build.SourceBranchName)"
              title: "$(Build.SourceBranchName)"
              assets: "$(System.ArtifactsDirectory)/packages/**/*"
              assetUploadMode: replace
              # releaseNotesSource: input
              # releaseNotes: asdfasdf12
              # isDraft: true
              isPreRelease: $(IsBetaRelease)
              # addChangeLog: false
